/*
 / _____)             _              | |
( (____  _____ ____ _| |_ _____  ____| |__
 \____ \| ___ |    (_   _) ___ |/ ___)  _ \
 _____) ) ____| | | || |_| ____( (___| | | |
(______/|_____)_|_|_| \__)_____)\____)_| |_|
    (C)2015 Semtech

Description: End device commissioning parameters

License: Revised BSD License, see LICENSE.TXT file include in the project

Maintainer: Miguel Luis and Gregory Cristian
*/

#ifndef __LORA_COMMISSIONING_H__
#define __LORA_COMMISSIONING_H__
#include "Arduino.h"

#ifdef __cplusplus
extern "C"{
#endif

#include "LoRaMac-definitions.h"
#include "board.h"
#include "LoRaMac.h"

extern void lora_printf(const char *format, ...);
extern uint8_t isJioned;
extern uint8_t isAckReceived;
/*!
 * When set to 1 the application uses the Over-the-Air activation procedure
 * When set to 0 the application uses the Personalization activation procedure
 */
#define OVER_THE_AIR_ACTIVATION                     1

/*!
 * Indicates if the end-device is to be connected to a private or public network
 */
#define LORAWAN_PUBLIC_NETWORK                      true

/*!
 * IEEE Organizationally Unique Identifier ( OUI ) (big endian)
 * \remark This is unique to a company or organization
 */
#define IEEE_OUI                                    0x00, 0xAC, 0xD4

/*!
 * Mote device IEEE EUI (big endian)
 *
 * \remark In this application the value is automatically generated by calling
 *         BoardGetUniqueId function
 */
#define LORAWAN_DEVICE_EUI                          { IEEE_OUI,  0xD3, 0x51, 0xD5, 0x4C, 0xD7 }

/*!
 * Application IEEE EUI (big endian)
 */
#define LORAWAN_APPLICATION_EUI                     { 0x70, 0xB3, 0xD5, 0x7E, 0xD0, 0x00, 0xF1, 0x3A }

/*!
 * AES encryption/decryption cipher application key
 */
#define LORAWAN_APPLICATION_KEY                     { 0x13, 0x73, 0x4E, 0xF0, 0xE8, 0xF7, 0xAA, 0x6A, 0xD6, 0x12, 0xF0, 0x05, 0xC3, 0xC1, 0x89, 0xE9 }

/*!
 * Current network ID
 */
#define LORAWAN_NETWORK_ID                          ( uint32_t )0x00666888

/*!
 * Device address on the network (big endian)
 *
 * \remark In this application the value is automatically generated using
 *         a pseudo random generator seeded with a value derived from
 *         BoardUniqueId value if LORAWAN_DEVICE_ADDRESS is set to 0
 */
#define LORAWAN_DEVICE_ADDRESS                      ( uint32_t )0x26011713

/*!
 * AES encryption/decryption cipher network session key
 */
#define LORAWAN_NWKSKEY                             { 0x59, 0xBD, 0xD9, 0x91, 0x48, 0x39, 0x69, 0xB3, 0x57, 0x33, 0x76, 0x1B, 0x8F, 0x8C, 0xE9, 0xE3 }

/*!
 * AES encryption/decryption cipher application session key
 */
#define LORAWAN_APPSKEY                             { 0xE4, 0x9E, 0x00, 0xC6, 0xB6, 0xAE, 0x8E, 0xFA, 0x98, 0x89, 0x73, 0x98, 0x94, 0xE7, 0x4D, 0x27 }

/*!
 * Defines the application data transmission duty cycle. 60s, value in [ms].
 */
#define APP_TX_DUTYCYCLE                            60000

/*!
 * Defines a random delay for application data transmission duty cycle. 1s,
 * value in [ms].
 */
#define APP_TX_DUTYCYCLE_RND                        1000

/*!
 * Default datarate
 */
#define LORAWAN_DEFAULT_DATARATE                    DR_0

/*!
 * LoRaWAN confirmed messages
 */
#define LORAWAN_CONFIRMED_MSG_ON                    true

/*!
 * LoRaWAN Adaptive Data Rate
 *
 * \remark Please note that when ADR is enabled the end-device should be static
 */
#define LORAWAN_ADR_ON                              1

/*!
 * LoRaWAN application port
 */
#define LORAWAN_APP_PORT                            2

/*!
* User application data buffer size
*/
#define LORAWAN_APP_DATA_MAX_SIZE                           64
/*!
 * User application data buffer size
 */
#if defined( USE_BAND_433 ) || defined( USE_BAND_470 ) || defined( USE_BAND_470PREQUEL ) || defined( USE_BAND_780 ) || defined( USE_BAND_868 )

#define LORAWAN_APP_DATA_SIZE                       16

#elif defined( USE_BAND_915 ) || defined( USE_BAND_915_HYBRID )

#define LORAWAN_APP_DATA_SIZE                       11

#endif



enum eDeviceState
{
    DEVICE_STATE_INIT,
    DEVICE_STATE_JOIN,
    DEVICE_STATE_SEND,
    DEVICE_STATE_CYCLE,
    DEVICE_STATE_SLEEP
};

struct ComplianceTest_s
{
    bool Running;
    uint8_t State;
    bool IsTxConfirmed;
    uint8_t AppPort;
    uint8_t AppDataSize;
    uint8_t *AppDataBuffer;
    uint16_t DownLinkCounter;
    bool LinkCheck;
    uint8_t DemodMargin;
    uint8_t NbGateways;
};

struct MsgRx {
    bool isDwn; 
    uint8_t length;
    uint8_t msg[LORAWAN_APP_DATA_MAX_SIZE];
};

extern uint8_t DevEui[];
extern uint8_t AppEui[];
extern uint8_t AppKey[];

#if( OVER_THE_AIR_ACTIVATION == 0 )
extern uint8_t NwkSKey[];
extern uint8_t AppSKey[];

/*!
* Device address
*/
extern uint32_t DevAddr;

#endif


#ifdef __cplusplus
} // extern "C"
#endif

#endif // __LORA_COMMISSIONING_H__
